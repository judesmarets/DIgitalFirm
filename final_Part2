import requests
import numpy as np
import pandas as pd
from datetime import datetime
from bs4 import BeautifulSoup

#connecting to DB
conn = sqlite3.connect("C:/Users/julie/Documents/Databases/ForexTest02.db")

#creating cursor
cur = conn.cursor()

ecb_page = requests.get('https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html')
list1=[]
list=[]
curr = ['USD', 'THB', 'SEK', 'GBP', 'BRL']
dateTimeObj = datetime.now()
dateObj = dateTimeObj.date()
dateStr = dateObj.strftime("%Y-%m-%d")
new=[]
new_dict = {}
page = BeautifulSoup(ecb_page.content, 'html.parser')

tds = page.findAll('span', class_='rate')
tdp = page.findAll('td', class_='currency')

for td in tds:
    a = td.text
    list.append(a)

for tr in tdp:
    sr = tr.find('a').text
    list1.append(sr)
for i in range(len(list1)):
    new.append(list1[i])
    new.append(list[i])

new_dict["Name"] = list1
new_dict["Value"] = list

dr1 = pd.DataFrame(new_dict)

def insert_webscr(date_wb, curr_wb, rate):
    #print(date_wb, curr_wb, rate)
    cur.execute('''INSERT into transactions(date, currCode, actualRate, source)
                    VALUES( ? , ? , ? , 'Webscraping');''', (date_wb, curr_wb, rate))
                    
    conn.commit()

    
def insert_forcast(a, date, currCode, arr_mean):
    #print(date)
    mean = np.mean(a['actualRate'])
    #print(a)
    if (a.size >= arr_mean) :
        update_sql = "update transactions set forecastedRate = " + str(mean) + " where date = '" + date + "' and currCode = '" + currCode + "'"
#         print(update_sql)
        cur.execute(update_sql)
        conn.commit()
        
def update_error():
    cur.execute("select * from transactions")
    data = cur.fetchall()
    # print(data)
    for x in data:
        list = [x[0],x[1],x[2],x[3],x[4],x[5]]
    #     print(list)
    #     if list[4] == None:
    #         print('nok')
        try:
            error = np.subtract(list[2],list[4])
    #         print(error)
            cur.execute("UPDATE transactions SET forecastError = " + str(error) + " where date = '" + list[0] + "' and currCode = '" + list[1] + "'")
            conn.commit()
        except:
            pass

for index,row in dr1.iterrows():
    if row['Name'] in curr:
        insert_webscr(dateStr, row['Name'], row['Value'])
        
query = "select * from transactions order by date;"
test = pd.read_sql_query(query, conn)
        
arr_mean = 3
for index, row in test.iterrows() :
    #print(str(index) + " : " + row['date'])
    t = test[test['currCode']==row['currCode']]
    t.reset_index(drop=True, inplace=True)
#     print("key : " + row['date'] + " " + row['currCode'])
    #i = t[t['date'] == row['date'] && t['currCode'] == row['currCode']].index
    i = t[(t['date']==row['date']) & (t['currCode']==row['currCode'])].index[0]
    #print(i)
    #print("index : " + str(i))
    #i = (t[t.index == index].index)[0]
    #print(t[i-arr_mean:i])
    if row['date'] == dateStr:
#         print('ok')
        insert_forcast(t[i-arr_mean:i], row['date'], row['currCode'], arr_mean)
    
update_error()
