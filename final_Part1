import pandas as pd
import sqlite3
import requests
import numpy as np

#connecting to DB
conn = sqlite3.connect("C:/Users/julie/Documents/Databases/ForexTest02.db")

#creating cursor
cur = conn.cursor()

#creating TABLE for the currencies
cur.execute('''CREATE TABLE if not exists currencies (
    currCode      VARCHAR (3)   PRIMARY KEY
                                UNIQUE ON CONFLICT IGNORE
                                NOT NULL,
    description   VARCHAR (255) NOT NULL,
    currSelection VARCHAR (5)   DEFAULT (False) 
                                NOT NULL
)
WITHOUT ROWID; ''')

#loading currencies data from FrankfurterAPI to our table 
response = requests.get("http://api.frankfurter.app/currencies")
file = response.json()
okcurr = ['BRL', 'GBP', 'SEK', 'THB', 'USD']
for key,value in file.items():
    if key in okcurr:
        dict = {'currCode':key, 'description':value, 'currSelection':'TRUE'}
    else:
        dict = {'currCode':key, 'description':value, 'currSelection':'FALSE'}
    cur.execute('''INSERT INTO currencies
                    (currCode, description, currSelection)
                    VALUES
                    (:currCode, :description, :currSelection);''', dict)
    conn.commit()
        

#creating transactions TABLE and VIEW
cur.execute('''CREATE TABLE if not exists transactions (
    date           DATE            NOT NULL,
    currCode                       REFERENCES currencies (currCode) 
                                   NOT NULL,
    actualRate     DECIMAL (10, 5),
    source         VARCHAR (20),
    forecastedRate DECIMAL (10, 5),
    forecastError  DECIMAL (10, 5), 
    PRIMARY KEY (date, currCode)
)
WITHOUT ROWID; ''')

cur.execute('''CREATE VIEW if not exists transview AS
    SELECT transactions.date,
           transactions.currCode,
           currencies.description,
           transactions.actualRate,
           transactions.source,
           transactions.forecastedRate,
           transactions.forecastError
      FROM transactions
           INNER JOIN
           currencies ON (transactions.currCode = currencies.currCode);

''')

#Loading historical rates for selected currencies since beginning of year
rates = requests.get("http://api.frankfurter.app/2020-01-01..2020-12-17?to=USD,GBP,BRL,SEK,THB")
ratesfile = rates.json()

for key,value in ratesfile.items():
    if key == 'rates':
        dict1 = value
        for key, value in dict1.items():
            dict2 = value
            date = key
            for key,value in dict2.items():
                dict3 = {'date':date, 'currCode':key, 'actualRate':value, 'source': 'FrankfurterAPI'}
                cur.execute('''INSERT INTO transactions
                            (date, currCode, actualRate, source)
                            VALUES
                            (:date, :currCode, :actualRate, :source);''', dict3)
                conn.commit()
                

query = "select * from transactions order by date;"
test = pd.read_sql_query(query, conn)

def insert_forcast(a, date, currCode, arr_mean):
    #print(date)
    mean = np.mean(a['actualRate'])
    #print(a)
    if (a.size >= arr_mean) :
        update_sql = "update transactions set forecastedRate = " + str(mean) + " where date = '" + date + "' and currCode = '" + currCode + "'"
        #print(update_sql)
        cur.execute(update_sql)
        conn.commit()
        
def update_error():
    cur.execute("select * from transactions")
    data = cur.fetchall()
    # print(data)
    for x in data:
        list = [x[0],x[1],x[2],x[3],x[4],x[5]]
    #     print(list)
    #     if list[4] == None:
    #         print('nok')
        try:
            error = np.subtract(list[2],list[4])
    #         print(error)
            cur.execute("UPDATE transactions SET forecastError = " + str(error) + " where date = '" + list[0] + "' and currCode = '" + list[1] + "'")
            conn.commit()
        except:
            pass
        
arr_mean = 3
for index, row in test.iterrows() :
    #print(str(index) + " : " + row['date'])
    t = test[test['currCode']==row['currCode']]
    t.reset_index(drop=True, inplace=True)
    #print("key : " + row['date'] + " " + row['currCode'])
    #i = t[t['date'] == row['date'] && t['currCode'] == row['currCode']].index
    i = t[(t['date']==row['date']) & (t['currCode']==row['currCode'])].index[0]
    #print(i)
    #print("index : " + str(i))
    #i = (t[t.index == index].index)[0]
    #print(t[i-arr_mean:i])
    insert_forcast(t[i-arr_mean:i], row['date'], row['currCode'], arr_mean)

    
update_error()
